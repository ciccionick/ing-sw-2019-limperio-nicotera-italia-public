package it.polimi.se2019.limperio.nicotera.italia.events.events_by_server;

import it.polimi.se2019.limperio.nicotera.italia.model.*;
import java.io.Serializable;
import java.util.ArrayList;


/**
 * Event generated by some components located in server side.
 * <p>
 *     Represents a kind of general event and is usually adapted to the different
 *     situations according to the values of the different boolean attributes.
 * </p>
 * <p>
 *     The way to understand, by the client, which kind of Event was sent by Server is evaluated
 *     the state of the relative boolean attribute.
 *     Example: if an event is the type of MapEvent, all the boolean attributes will be false apart
 *     isMapEvent.
 *
 * </p>
 * @author Pietro L'Imperio
 */
public class ServerEvent implements Serializable {
    static final long serialVersionUID = 420000013;
    /**
     * The message stored in the event for the player directly involved in the event.
     */
    private String messageForInvolved;
    /**
     * The message store in the event for all of the other players interested in the event but not directly involved.
     */
    private String messageForOthers;

    /**
     * The list of nickname interested to receive the event.
     */
    private ArrayList<String> nicknames = new ArrayList<>();

    /**
     * The nickname of the player directly involved in the event.
     */
    private String nicknameInvolved;

    /**
     * It's true if the event is concerning a change in a player board of any players, otherwise false.
     */
    private boolean isPlayerBoardEvent = false;
    /**
     * It's true if the event is concerning a change in the map, otherwise false.
     */
    private boolean isMapEvent = false;
    /**
     * It's true if the event is concerning a change in the killshot track, otherwise false.
     */
    private boolean isKillshotTrackEvent = false;
    /**
     * It's true if the event is generated to request to a player to draw two power up cards, otherwise false.
     */
    private boolean isRequestForDrawTwoPowerUpCardsEvent = false;
    /**
     * It's true if the event is generated to request to a player to discard a power up card to discard a power up card to be spawn, otherwise false.
     */
    private boolean isRequestToDiscardPowerUpCardToSpawnEvent = false;
    /**
     * It's true if the event is generated to request to a player to choose an action to do, otherwise false.
     */
    private boolean isRequestActionEvent = false;
    /**
     * It's true if the event is generated to request to a player to choose a weapon to catch, otherwise false.
     */
    private boolean isRequestForChooseAWeaponToCatch = false;
    /**
     * It's true if the event is generated to notify to players that the game is ended, otherwise false.
     */
    private boolean isFinished=false;
    /**
     * It's true if the event is generated to request to a player to select a square to an action, otherwise false.
     */
    private boolean isRequestSelectionSquareForAction = false;
    /**
     * It's true if the event is generated to notify the generation of a player, otherwise false.
     */
    private boolean isGenerationEvent = false;
    /**
     * It's true if the event is generated to notify to players that an action has been done, otherwise false.
     */
    private boolean isNotifyAboutActionDone = false;
    /**
     * It's true if the event is generated to request to a player to discard a weapon card, otherwise false.
     */
    private boolean isRequestToDiscardWeaponCard = false;
    /**
     * It's true if the event is generated to notify to players that a timer about the duration of the turn is over, otherwise false.
     */
    private boolean isTimerOverEvent = false;
    /**
     * It's true if the event is generated to request to a player to choose the action that terminator has to do, otherwise false.
     */
    private boolean isRequestToChooseTerminatorAction = false;
    /**
     * It's true if the event is generated to request to a player to select a player that terminator has to attack, otherwise false.
     */
    private boolean isRequestToSelectionPlayerToAttackWithTerminator =false;
    /**
     * It's true if the event is generated to notify an update of the score, otherwise false.
     */
    private boolean isUpdateScoreEvent = false;
    /**
     * It's true if the event is generated to request to a player to draw a power up card, otherwise false.
     */
    private boolean isRequestForDrawOnePowerUpCardEvent = false;
    /**
     * It's true if the event is generated to request to a player to choose a weapon, otherwise false.
     */
    private boolean isRequestToChooseWeapon = false;
    /**
     * It's true if the event is generated to request to a player to choose an effect, otherwise false.
     */
    private boolean isRequestToChooseAnEffect = false;
    /**
     * It's true if the event is generated to request to a player to discard a power up card, otherwise false.
     */
    private boolean isRequestToDiscardPowerUpCard = false;
    /**
     * It's true if the event is generated to request to a player to decide for a payment what he wants to use, otherwise false.
     */
    private boolean isRequestToPayWithAmmoOrPUCard = false;
    /**
     * It's true if the event is generated to request to a player to choose another player, otherwise false.
     */
    private boolean isRequestToChooseAPlayer = false;
    /**
     * It's true if the event is generated to request to a player to choose a weapon he wants to reload, otherwise false.
     */
    private boolean isRequestSelectionWeaponToReload = false;
    /**
     * It's true if the event is generated to request to a player to choose more than a player, otherwise false.
     */
    private boolean isRequestToChooseMultiplePlayers = false;
    /**
     * It's true if the event is generated to notify players about the final update of the score with ultimate ranking, otherwise false.
     */
    private boolean isFinalUpdate = false;
    /**
     * It's true if the event is generated to notify players about the disconnection of a player, otherwise false.
     */
    private boolean isDisconnectionEvent = false;
    /**
     * It's true if the event is generated to notify players the reconnection of a player, otherwise false.
     */
    private boolean isReconnectionEvent = false;


    /**
     * The number of the current action player has to do.
     */
    private int numOfAction;
    /**
     * The maximum number that a player can do in his turn.
     */
    private int numOfMaxAction;

    public ServerEvent(){

    }

    /**
     * Constructor where the message for involved is initialized.
     * @param message Message direct to the involved player of the event.
     */
    public ServerEvent(String message) {
        this.messageForInvolved = message;
    }

    public boolean isRequestToSelectionPlayerToAttackWithTerminator() {
        return isRequestToSelectionPlayerToAttackWithTerminator;
    }

    public boolean isRequestSelectionWeaponToReload() {
        return isRequestSelectionWeaponToReload;
    }

     void setRequestSelectionWeaponToReload() {
        isRequestSelectionWeaponToReload = true;
    }

    public boolean isRequestToChooseMultiplePlayers() {
        return isRequestToChooseMultiplePlayers;
    }

    void setRequestToChooseMultiplePlayers() {
        isRequestToChooseMultiplePlayers = true;
    }

    void setRequestToSelectionPlayerToAttackWithTerminator() {
        isRequestToSelectionPlayerToAttackWithTerminator = true;
    }

    public boolean isRequestToPayWithAmmoOrPUCard() {
        return isRequestToPayWithAmmoOrPUCard;
    }

    void setRequestToPayWithAmmoOrPUCard() {
        isRequestToPayWithAmmoOrPUCard = true;
    }

    public boolean isRequestToChooseAPlayer() {
        return isRequestToChooseAPlayer;
    }

    void setRequestToChooseAPlayer() {
        isRequestToChooseAPlayer = true;
    }

    public boolean isFinalUpdate() {
        return isFinalUpdate;
    }

    public void setFinalUpdate() {
        isFinalUpdate = true;
    }

    public String getMessageForInvolved() {
        return messageForInvolved;
    }

    public void setMessageForInvolved(String messageForInvolved) {
        this.messageForInvolved = messageForInvolved;
    }

    public String getMessageForOthers() {
        return messageForOthers;
    }

    public boolean isRequestToDiscardPowerUpCard() {
        return isRequestToDiscardPowerUpCard;
    }

     void setRequestToDiscardPowerUpCard() {
        isRequestToDiscardPowerUpCard = true;
    }

    public void setMessageForOthers(String messageForOthers) {
        this.messageForOthers = messageForOthers;
    }

    public void setNicknames(ArrayList<String> nicknames) {
        this.nicknames = nicknames;
    }

    public ArrayList<String> getNicknames() {
        return nicknames;
    }

    public String getNicknameInvolved() {
        return nicknameInvolved;
    }


    public void setNicknameInvolved(String nicknameInvolved) {
        this.nicknameInvolved = nicknameInvolved;
    }

    public void setNumOfMaxAction(int numOfMaxAction) {
        this.numOfMaxAction = numOfMaxAction;
    }

    public boolean isPlayerBoardEvent() {
        return isPlayerBoardEvent;
    }

    public void setPlayerBoardEvent() {
        isPlayerBoardEvent = true;
    }

    public boolean isMapEvent() {
        return isMapEvent;
    }

    public void setMapEvent() {
        isMapEvent = true;
    }

    public boolean isRequestForDrawOnePowerUpCardEvent() {
        return isRequestForDrawOnePowerUpCardEvent;
    }

    public void setRequestForDrawOnePowerUpCardEvent() {
        isRequestForDrawOnePowerUpCardEvent = true;
    }

    public boolean isRequestToChooseWeapon() {
        return isRequestToChooseWeapon;
    }

    void setRequestToChooseWeapon() {
        isRequestToChooseWeapon = true;
    }

    public boolean isRequestToChooseAnEffect() {
        return isRequestToChooseAnEffect;
    }

    void setRequestToChooseAnEffect() {
        isRequestToChooseAnEffect = true;
    }

    public boolean isFinished() {
        return isFinished;
    }

    public boolean isRequestActionEvent() {
        return isRequestActionEvent;
    }

    public void setRequestActionEvent() {
        isRequestActionEvent = true;
    }

    public boolean isKillshotTrackEvent() {
        return isKillshotTrackEvent;
    }

    public void setKillshotTrackEvent() {
        isKillshotTrackEvent = true;
    }

    public boolean isTimerOverEvent() {
        return isTimerOverEvent;
    }

    public boolean isUpdateScoreEvent() {
        return isUpdateScoreEvent;
    }

    public void setUpdateScoreEvent() {
        isUpdateScoreEvent = true;
    }

    public void setTimerOverEvent() {
        isTimerOverEvent = true;
    }

    public boolean isRequestForDrawTwoPowerUpCardsEvent() {
        return isRequestForDrawTwoPowerUpCardsEvent;
    }

    public void setRequestForDrawTwoPowerUpCardsEvent() {
        isRequestForDrawTwoPowerUpCardsEvent = true;
    }

    public boolean isReconnectionEvent() {
        return isReconnectionEvent;
    }

    public void setReconnectionEvent() {
        isReconnectionEvent = true;
    }

    public boolean isRequestToDiscardPowerUpCardToSpawnEvent() {
        return isRequestToDiscardPowerUpCardToSpawnEvent;
    }

    public void setRequestToDiscardPowerUpCardToSpawnEvent() {
        isRequestToDiscardPowerUpCardToSpawnEvent = true;
    }

    public boolean isRequestForChooseAWeaponToCatch() {
        return isRequestForChooseAWeaponToCatch;
    }

    void setRequestForChooseAWeaponToCatch() {
        isRequestForChooseAWeaponToCatch = true;
    }


    public int getNumOfAction() {
        return numOfAction;
    }

    public void setNumOfAction(int numOfAction) {
        this.numOfAction = numOfAction;
    }

    public boolean isRequestSelectionSquareForAction() {
        return isRequestSelectionSquareForAction;
    }

    void setRequestSelectionSquareForAction() {
        isRequestSelectionSquareForAction = true;
    }

    public boolean isNotifyAboutActionDone() {
        return isNotifyAboutActionDone;
    }

    public void setNotifyAboutActionDone() {
        isNotifyAboutActionDone = true;
    }



    public boolean isGenerationEvent() {
        return isGenerationEvent;
    }

    public boolean isRequestToDiscardWeaponCard() {
        return isRequestToDiscardWeaponCard;
    }

    void setRequestToDiscardWeaponCard() {
        isRequestToDiscardWeaponCard = true;
    }

    public void setGenerationEvent() {
        isGenerationEvent = true;
    }

    public boolean isRequestToChooseTerminatorAction() {
        return isRequestToChooseTerminatorAction;
    }

    void setRequestToChooseTerminatorAction() {
        isRequestToChooseTerminatorAction = true;
    }

    public boolean isDisconnectionEvent() {
        return isDisconnectionEvent;
    }

    public void setDisconnectionEvent() {
        isDisconnectionEvent = true;
    }

    /**
     * Represents a simplified structure to encapsulate the main attributes of cards
     * (Weapon and PowerUp) to send them to clients removing from them the possibility to use
     * directly their effects.
     */

    public static class AliasCard implements Serializable{
        static final long serialVersionUID = 420000000;
        /**
         * The name of card
         */
        String name;
        /**
         * The description of card.
         */
        String description;
        /**
         * The color of card.
         */
        ColorOfCard_Ammo color;

        /**
         * The list with the name of the effects for the weapon card.
         */
        ArrayList<String> nameOfEffects;
        /**
         * The list with the descriptions of the effects for the weapon card.
         */
        ArrayList<String> descriptionOfEffects;

        /**
         * It's true if the alias card represents a weapon and the weapon is load, otherwise false.
         */
        boolean isLoaded = true;

        /**
         * Constructor that initialize name, description and color of the card.
         * @param name The name of the card.
         * @param description The description of the card.
         * @param color The color of the card.
         */
        public AliasCard(String name, String description, ColorOfCard_Ammo color) {
            this.name = name;
            this.description = description;
            this.color = color;
        }

        public String getName() {
            return name;
        }

        public String getDescription() {
            return description;
        }

        public ColorOfCard_Ammo getColor() {
            return color;
        }

        public boolean isLoaded() {
            return isLoaded;
        }

        void setLoaded(boolean loaded) {
            isLoaded = loaded;
        }

        public ArrayList<String> getNameOfEffects() {
            return nameOfEffects;
        }

        void setNameOfEffects(ArrayList<String> nameOfEffects) {
            this.nameOfEffects = nameOfEffects;
        }

        public ArrayList<String> getDescriptionOfEffects() {
            return descriptionOfEffects;
        }

        void setDescriptionOfEffects(ArrayList<String> descriptionOfEffects) {
            this.descriptionOfEffects = descriptionOfEffects;
        }
    }


}
