package it.polimi.se2019.limperio.nicotera.italia.events.events_by_client;

import it.polimi.se2019.limperio.nicotera.italia.events.events_by_server.ServerEvent;
import it.polimi.se2019.limperio.nicotera.italia.network.server.VirtualView;

import java.io.Serializable;

/**
 * Event generated by some components located in client side.
 * <p>
 *     Represents a kind of general event and is usually adapted to the different
 *     situations according to the values of the different boolean attributes.
 * </p>
 * <p>
 *     The way to understand, by the virtual view of a player, which wind of Event was sent by the client is evaluated
 *     the state of the relative boolean attribute.
 *     Example: if an event is the type of RequestToRunByPlayer, all the boolean attributes will be false apart
 *     isRequestToRunByPlayer.
 *
 * </p>
 * @author Pietro L'Imperio
 */
public class ClientEvent implements Serializable {
    static final long serialVersionUID = 420000014;
    /**
     * The message stored in event.
     */
   private String message;
    /**
     * The nickname of the Player who is sending the event.
     */
   private String nickname;

    /**
     * Reference to the Virtual View of the player that is sending the event
     *
     */
   private VirtualView myVirtualView = null;
   private boolean isDrawTwoPowerUpCards = false;
   private boolean isDiscardPowerUpCardToSpawn = false;
   private boolean isRequestToRunByPlayer = false;
   private boolean isRequestToCatchByPlayer = false;
   private boolean isRequestToShootByPlayer = false;
   private boolean isCatchEvent = false;
   private boolean isSelectionSquareForRun = false;
   private boolean isSelectionWeaponToCatch = false;
   private boolean isSelectionWeaponToDiscard = false;
   private boolean isRequestTerminatorActionByPlayer = false;
   private boolean isGenerationTerminatorEvent = false;


    public ClientEvent(String message, String nickname) {
        this.message = message;
        this.nickname = nickname;
    }

    public VirtualView getMyVirtualView() {
        return myVirtualView;
    }

    public void setMyVirtualView(VirtualView myVirtualView) {
        this.myVirtualView = myVirtualView;
    }

    public boolean isRequestToRunByPlayer() {
        return isRequestToRunByPlayer;
    }

    public boolean isRequestToCatchByPlayer() {
        return isRequestToCatchByPlayer;
    }

    public boolean isRequestToShootByPlayer() {
        return isRequestToShootByPlayer;
    }

    public void setRequestToShootByPlayer(boolean requestToShootByPlayer) {
        isRequestToShootByPlayer = requestToShootByPlayer;
    }

    public void setRequestToCatchByPlayer(boolean requestToCatchByPlayer) {
        isRequestToCatchByPlayer = requestToCatchByPlayer;
    }

    public void setRequestToRunByPlayer(boolean requestToRunByPlayer) {
        isRequestToRunByPlayer = requestToRunByPlayer;
    }

    public String getMessage() {
        return message;
    }

    public String getNickname() {
        return nickname;
    }

    public boolean isDrawTwoPowerUpCards() {
        return isDrawTwoPowerUpCards;
    }

     void setDrawTwoPowerUpCards(boolean drawTwoPowerUpCards) {
        isDrawTwoPowerUpCards = drawTwoPowerUpCards;
    }

    public boolean isDiscardPowerUpCardToSpawn() {
        return isDiscardPowerUpCardToSpawn;
    }

     void setDiscardPowerUpCardToSpawn(boolean discardPowerUpCardToSpawn) {
        isDiscardPowerUpCardToSpawn = discardPowerUpCardToSpawn;
    }

    public boolean isSelectionWeaponToDiscard() {
        return isSelectionWeaponToDiscard;
    }

    public void setSelectionWeaponToDiscard(boolean selectionWeaponToDiscard) {
        isSelectionWeaponToDiscard = selectionWeaponToDiscard;
    }

    public boolean isCatchEvent() {
        return isCatchEvent;
    }

    public void setCatchEvent(boolean catchEvent) {
        isCatchEvent = catchEvent;
    }

    public boolean isSelectionSquareForRun() {
        return isSelectionSquareForRun;
    }

    public void setSelectionSquareForRun(boolean selectionSquareForRun) {
        isSelectionSquareForRun = selectionSquareForRun;
    }

    public boolean isSelectionWeaponToCatch() {
        return isSelectionWeaponToCatch;
    }

    public void setSelectionWeaponToCatch(boolean selectionWeaponToCatch) {
        isSelectionWeaponToCatch = selectionWeaponToCatch;
    }

    public boolean isGenerationTerminatorEvent() {
        return isGenerationTerminatorEvent;
    }

    public void setGenerationTerminatorEvent(boolean generationTerminatorEvent) {
        isGenerationTerminatorEvent = generationTerminatorEvent;
    }
}
